/* Main.c file generated by New Project wizard
 *
 * Created:   qui out 16 2025
 * Processor: 8086
 * Compiler:  Digital Mars C
 *
 * Before starting simulation set Internal Memory Size 
 * in the 8086 model properties to 0x10000
 */
 
// robot base i/o port:
//r_port equ 9
#define r_port 9
 
 int count = 0;
 
void Robot (void)
{
    asm{
//===================================
mov dx, 199
mov ax, 0
out dx, ax
       
       
eternal_loop:
       
// Verifica se o count >= 5
mov ax, count
cmp ax, 5
jge stop_robot  // se count >= 5, parar
       
       
// wait until robot
// is ready:
call wait_robot

// examine the area
// in front of the robot:
mov al, 4
out r_port, al

call wait_exam

// get result from
// data register:
in al, r_port + 1

// nothing found?
cmp al, 0
je cont  // - yes, so continue.

// wall?
cmp al, 255  
je cont  // - yes, so continue.

//===============
// switched-on lamp?
cmp al, 7
je cont  // já está acesa, ignora

// Se chegou aqui, é lâmpada apagada
call switch_on_lamp
//===============

cont:
call random_turn

call wait_robot

// try to step forward:
mov al, 1
out r_port, al

call wait_robot

// try to step forward again:
mov al, 1
out r_port, al

jmp eternal_loop // go again!

//===================================

// this procedure does not
// return until robot is ready
// to receive next command:
wait_robot :
// check if robot busy:
busy: in al, r_port+2
      test al, 0b00000010
      jnz busy // busy, so wait.
ret    


//===================================

// this procedure does not
// return until robot completes
// the examination:
wait_exam :
// check if has new data:
busy2: in al, r_port+2
       test al, 0b00000001
       jz busy2 // no new data, so wait.
ret    


//===================================

// switch off the lamp:
switch_off_lamp :
mov al, 6
out r_port, al
ret


//===================================
// switch on the lamp:
switch_on_lamp:
inc count ;
mov dx,199
mov ax,count
out dx,ax

syncronize: 
mov al, 5
out r_port, al
// wait until robot
// is ready:
call wait_robot
// examine the area
// in front of the robot:
mov al, 4
out r_port, al
call wait_exam
// get result from
// data register:
in al, r_port + 1
cmp al,8
je syncronize
ret
//===================================

// generates a random turn using
// system timer:
random_turn :

// get number of clock
// ticks since midnight
// in cx:dx
mov ah, 0
int 1ah

// randomize using xor:
xor dh, dl
xor ch, cl
xor ch, dh

test ch, 2
jz no_turn

test ch, 1
jnz turn_right

// turn left:
mov al, 2
out r_port, al
// exit from procedure:
ret  

turn_right:
mov al, 3
out r_port, al

no_turn:
ret



//===================================

stop_robot:
jmp stop_robot  // loop infinito, para o robô

//===================================
    }
    
}

void main(void)
 {
    Robot();
   // Write your code here
   while (1)
      ;
 }
